#!/bin/bash

# Prompt the user to set the value for the which_computer variable
echo "Please enter the computer type (e.g., 'local', 'neurospin', 'remote', 'Fosca_neurospin'):"
read which_computer

# Set the script_dir based on the value of which_computer
if [ "$which_computer" == "local" ]; then
    # Specify the directory of your config_files scripts
    script_dir="/Users/et/Documents/UNICOG/2-Experiments/replayseq/1-Scripts/analysis_scripts/config_files"
    # Define the BIDS root directory
    bids_root="/Volumes/T5_EVO/1-experiments/REPLAYSEQ/2-Data/BIDS"

elif [ "$which_computer" == "remote" ]; then
    script_dir=$(dirname "$0")
    bids_root="/neurospin/meg/meg_tmp/2024_ReplaySeq_Elyes/replayseq/2-Data/BIDS"
    

elif [ "$which_computer" == "neurospin" ]; then
    script_dir="$(dirname "$0")/analysis_scripts/config_files"
    bids_root="$(dirname "$(dirname "$0")")/2-Data/BIDS"

elif [ "$which_computer" == "Fosca_neurospin" ]; then
    script_dir="$(dirname "$0")/analysis_scripts/config_files"
    bids_root="/Volumes/$(dirname "$(dirname "$0")")/2-Data/BIDS"

else
    echo "Invalid input. Please enter 'local', 'remote', or 'neurospin'."
    exit 1
fi

#script_dir=$(dirname "$0")

# Function to run a command, check if it was successful, and log the output
run_command() {
    local cmd="$1"
    local description="$2"
    local logfile="$3"
    
    echo "Running: $description" | tee -a "$logfile"
    eval "$cmd" 2>&1 | tee -a "$logfile"
    if [ $? -ne 0 ]; then
        echo "$description failed, proceeding to the next one." | tee -a "$logfile"
    else
        echo "$description succeeded." | tee -a "$logfile"
    fi
}

# Define the base log directory
log_base_dir="$bids_root/mne_bids_logs"

# Define the merged configurations and steps
configs0=("config_sequence_icm.py")

configs=()

steps0=("06a1" "06a2" "07")

steps=("01" "02" "03" "04" "05" "06a1" "06a2" "07")

# Get the current date
current_date=$(date +"%Y-%m-%d")

# Run commands for all configurations
for config in "${configs0[@]}"; do
    # Determine the config name without the .py extension
    config_name=$(basename "$config" .py)
    
    # Define the log directory for the specific configuration
    log_dir="$log_base_dir/$config_name"
    
    # Create the log directory if it doesn't exist
    mkdir -p "$log_dir"
    
    for step in "${steps0[@]}"; do
        count=$((count + 1))
        
        # Define the log file for this specific run
        logfile="$log_dir/pipeline_log_$current_date.txt"
        
        cmd="mne_bids_pipeline --config $script_dir/$config --steps=preprocessing/$step"
        description="Running $config with step preprocessing/$step"
        run_command "$cmd" "$description" "$logfile"
        
        echo -e "\n=======================================" | tee -a "$logfile"
        echo -e "Command $count completed." | tee -a "$logfile"
        echo -e "=======================================\n" | tee -a "$logfile"
    done
done

# Run commands for all configurations
for config in "${configs[@]}"; do
    # Determine the config name without the .py extension
    config_name=$(basename "$config" .py)
    
    # Define the log directory for the specific configuration
    log_dir="$log_base_dir/$config_name"
    
    # Create the log directory if it doesn't exist
    mkdir -p "$log_dir"
    
    for step in "${steps[@]}"; do
        count=$((count + 1))
        
        # Define the log file for this specific run
        logfile="$log_dir/pipeline_log_$current_date.txt"
        
        cmd="mne_bids_pipeline --config $script_dir/$config --steps=preprocessing/$step"
        description="Running $config with step preprocessing/$step"
        run_command "$cmd" "$description" "$logfile"
        
        echo -e "\n=======================================" | tee -a "$logfile"
        echo -e "Command $count completed." | tee -a "$logfile"
        echo -e "=======================================\n" | tee -a "$logfile"
    done
done
